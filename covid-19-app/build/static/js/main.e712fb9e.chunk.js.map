{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","cases","title","isRed","isBlack","isOrange","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","zoom","center","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","rgb","options","legend","dispaly","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapcountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","key","_id","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e712fb9e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({\r\n  cases,\r\n  title,\r\n  isRed,\r\n  isOrange,\r\n  isBlack,\r\n  active,\r\n  total,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox__selected\"} ${\r\n        isRed && \"infoBox__red\"\r\n      } ${!isRed && !isBlack && \"infoBox__green\"} ${\r\n        isBlack && \"infoBox__black\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className=\"infoBox__cases\">{cases}</h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          <h3>Total: {total}</h3>\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#cc1034\",\r\n    half_op: \"rgba(204,16,52,0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    half_op: \"rgba(125,215,29,0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#000\",\r\n    half_op: \"rgba(0,0,0,0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info__container\">\r\n          <div\r\n            className=\"info__flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info__name\">{country.country}</div>\r\n          <div className=\"info__confirm\">\r\n            <span className=\"info__cases\">\r\n              Cases: {numeral(country.cases).format(\"0, 0\")}\r\n            </span>\r\n          </div>\r\n          <div className=\"info__recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info__deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, zoom, center }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">openstreetmap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgb(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgb(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#090909\",\r\n    half_op: \"rgb(0, 0, 0, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nconst options = {\r\n  legend: {\r\n    dispaly: true,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          parser: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          dispaly: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                backgroundColor: casesTypeColors[casesType].half_op,\r\n                borderColor: casesTypeColors[casesType].hex,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapcountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapcountries(data);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER 2020</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              key={countries._id}\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Corona Virus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isBlack\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData}></Table>\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}